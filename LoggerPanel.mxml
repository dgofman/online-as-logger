<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" layout="vertical" 
	creationComplete="onComplete()" viewSourceURL="srcview/index.html">

	<mx:Style>
		Application{
			paddingTop:0;
			paddingRight:0;
			paddingLeft:0;
			paddingBottom:0;
			verticalGap:0;
			backgroundColor:#F0F0F0;
		}
	</mx:Style>

	<mx:Script>
		<![CDATA[
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;
			import mx.formatters.DateFormatter;

			private static const LOGGER__DEBUG:int       = 0x01;
			private static const LOGGER__INFORMATION:int = 0x02;
			private static const LOGGER__WARNING:int     = 0x04;
			private static const LOGGER__ERROR:int       = 0x08;

			[Bindable]
			private var logs:ArrayCollection;
			[Bindable]
			private var isListen:Boolean = true;
			[Bindable]
			private var isDebug:Boolean = true;
			[Bindable]
			private var isInfo:Boolean = true;
			[Bindable]
			private var isWarn:Boolean = true;
			[Bindable]
			private var isError:Boolean = true;

			[Embed(source="/assets/exit.png")]      public static const exitIcon:Class;
			[Embed(source="/assets/reconnect.png")] public static const reconnectIcon:Class;
			[Embed(source="/assets/lunch.png")]     public static const lunchIcon:Class;
			[Embed(source="/assets/clear.png")]     public static const clearIcon:Class;
			[Embed(source="/assets/debug.png")]     public static const debugIcon:Class;
			[Embed(source="/assets/info.png")]      public static const infoIcon:Class;
			[Embed(source="/assets/warning.png")]   public static const warningIcon:Class;
			[Embed(source="/assets/error.png")]     public static const errorIcon:Class;
			[Embed(source="/assets/document.png")]  public static const documentIcon:Class;
			[Embed(source="/assets/traverse.png")]  public static const traverseIcon:Class;

			private const toggleOn:String = "On";
			private const toggleOff:String = "Off";
			
			private var dateFormatter:DateFormatter;

			private function onComplete():void{
				Security.allowDomain("*");
				Security.allowInsecureDomain("*");

				dateFormatter = new DateFormatter();
				dateFormatter.formatString = "H:NN:SS A";
				logs = new ArrayCollection();
				reconnect();
			}

			private function reconnect():void{
				function resultHandler(time:String, msg:String, level:int):void{
					if(isListen && ((level == LOGGER__DEBUG && isDebug) || (level == LOGGER__WARNING && isWarn) ||
							(level == LOGGER__ERROR && isError) || (level == LOGGER__INFORMATION && isInfo))){
							var info:Object = {level:level, ftime:time, time:dateFormatter.format(new Date()), message:msg};
							logs.addItem(getInfo(info));
							dg.verticalScrollPosition = dg.maxVerticalScrollPosition;
					}
				};
				function statusHandler(status:String, message:String):void{
						logs.addItem({level:Logger.LOGGER_INFORMATION.level, ftime:getTimer(), 
						time:dateFormatter.format(new Date()), message:message});
					dg.verticalScrollPosition = dg.maxVerticalScrollPosition;
				};
				Logger.connect(resultHandler, statusHandler);
			}

			private function closeApp():void{
				navigateToURL(new URLRequest("javascript:window.close();void(0);"),"_self");
			}

			private static function getInfo(info:Object):Object{
				switch(info.level){
					case LOGGER__INFORMATION:
						info.type = "Information";
						info.icon = infoIcon;
						info.color = 0x666666;
						break;
					case LOGGER__WARNING:
						info.type = "Warning";
						info.icon = warningIcon;
						info.color = 0x996633;
						break;
					case LOGGER__ERROR:
						info.type = "Error";
						info.icon = errorIcon;
						info.color = 0xFF0000;
						break;
					default:
						info.type = "Debug";
						info.icon = debugIcon;
						info.color = 0x000000;
						break;
				}
				return info;
			}

			public static function getIcon(data:Object):Class{
				return getInfo(data).icon;
			}

			public static function getColor(data:Object):uint{
				return data.color;
			}

			public static function getMessage(data:Object):String{
				return data.message ? data.message.split("\n").join(" ") : data.message
			}
		]]>
	</mx:Script>
	<mx:HBox width="100%" horizontalGap="2">
		<mx:Button toolTip="Close" icon="{exitIcon}" height="25" click="closeApp()"/>
		<mx:Button toolTip="Reconnect" icon="{reconnectIcon}" height="25" click="reconnect()"/>
		<mx:Button toolTip="Listen Trace ({isListen ? toggleOn : toggleOff})" icon="{lunchIcon}" toggle="true" selected="true" height="25" click="{isListen = isListen != true}"/>
		<mx:Button toolTip="Clear" icon="{clearIcon}" height="25" click="logs=new ArrayCollection()"/>
		<mx:Button toolTip="Capture Debug ({isDebug ? toggleOn : toggleOff})" icon="{debugIcon}" toggle="true" selected="true" height="25" click="{isDebug = isDebug != true}"/>
		<mx:Button toolTip="Capture Information ({isInfo ? toggleOn : toggleOff})" icon="{infoIcon}" toggle="true" selected="true" height="25" click="{isInfo = isInfo != true}"/>
		<mx:Button toolTip="Capture Warnings ({isWarn ? toggleOn : toggleOff})" icon="{warningIcon}" toggle="true" selected="true" height="25" click="{isWarn = isWarn != true}"/>
		<mx:Button toolTip="Capture Errors ({isError ? toggleOn : toggleOff})" icon="{errorIcon}" toggle="true" selected="true" height="25" click="{isError = isError != true}"/>
	</mx:HBox>
	<mx:HRule width="100%"/>
	<mx:DataGrid id="dg" width="100%" height="100%" editable="true" dataProvider="{logs}" fontWeight="normal">
		<mx:columns>
			<mx:DataGridColumn headerText="" width="20" editable="false" sortable="false">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Image source="{LoggerPanel.getIcon(data)}" width="8" height="8" scaleContent="false" horizontalAlign="center"/>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn dataField="time" headerText="Time" textAlign="center" width="80" editable="false"/>
			<mx:DataGridColumn dataField="ftime" headerText="Flash Time" textAlign="center" width="80" editable="false"/>
			<mx:DataGridColumn dataField="type" headerText="Type" textAlign="center" width="80" editable="false"/>
			<mx:DataGridColumn headerText="Message">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Text width="100%" text="{LoggerPanel.getMessage(data)}" color="{LoggerPanel.getColor(data)}" toolTip="{data.message}"/>
					</mx:Component>
				</mx:itemRenderer>
				<mx:itemEditor>
					<mx:Component>
						<mx:TextInput width="100%" text="{data.message}"/>
					</mx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
			<mx:DataGridColumn width="20" editable="false" sortable="false">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Image source="{LoggerPanel.documentIcon}" buttonMode="true" useHandCursor="true" toolTip="Show Log" 
							width="8" height="8" scaleContent="false" horizontalAlign="center" click="ExternalInterface.call('writeDoc', data.message, data.time, false)"/>
					</mx:Component>
				</mx:itemRenderer>	
			</mx:DataGridColumn>
			<mx:DataGridColumn width="20" editable="false" sortable="false">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Image source="{LoggerPanel.traverseIcon}" buttonMode="true" useHandCursor="true" toolTip="Traverse XML Data" 
							width="8" height="8" scaleContent="false" horizontalAlign="center" click="ExternalInterface.call('writeDoc', data.message, data.time, true)"/>
					</mx:Component>
				</mx:itemRenderer>	
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
</mx:Application>
